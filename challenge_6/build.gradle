/*
 * Copyright 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "kotlin-kapt"
    id "dagger.hilt.android.plugin"
    id 'org.jetbrains.kotlin.plugin.compose'
}

// Reads the Google maps key that is used in the AndroidManifest
Properties properties = new Properties()
if (rootProject.file("local.properties").exists()) {
    properties.load(rootProject.file("local.properties").newDataInputStream())
}

android {
    namespace "androidx.compose.samples.crane"
    compileSdkVersion 35
    defaultConfig {
        applicationId "androidx.compose.samples.crane"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.compose.samples.crane.CustomTestRunner"

        manifestPlaceholders = [MAPS_API_KEY: properties.getProperty("MAPS_API_KEY", "")]
    }

    signingConfigs {
        // We use a bundled debug keystore, to allow debug builds from CI to be upgradable
        debug {
            storeFile rootProject.file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    kotlinOptions {
        jvmTarget = "1.8"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "2.0.0"
    }
    buildFeatures {
        compose true

        // Disable unused AGP features
        buildConfig false
        aidl false
        renderScript false
        resValues false
        shaders false
    }

    packagingOptions {
        // Multiple dependency bring these files in. Exclude them to enable
        // our test APK to build (has no effect on our AARs)
        excludes += "/META-INF/AL2.0"
        excludes += "/META-INF/LGPL2.1"
    }
}

dependencies {
    implementation libs.kotlinx.coroutines.android
    implementation libs.maps
    implementation libs.maps.v3.ktx
    constraints {
        // Volley is a transitive dependency of maps
        implementation("com.android.volley:volley:1.2.1") {
            because("Only volley 1.2.0 or newer are available on maven.google.com")
        }
    }

    implementation libs.androidx.activity.compose
    implementation libs.androidx.appcompat
    implementation libs.androidx.tracing

    def composeBom = libs.androidx.compose.bom.v20241001
    implementation(composeBom)
    androidTestImplementation(composeBom)
    implementation libs.androidx.runtime
    implementation libs.androidx.material
    implementation libs.androidx.foundation
    implementation libs.androidx.foundation.layout
    implementation libs.androidx.animation
    implementation libs.ui.tooling.preview
    androidTestImplementation libs.ui.test.junit4
    debugImplementation libs.ui.tooling
    debugImplementation libs.ui.test.manifest

    def lifecycle_version = "2.8.7"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.hilt.android
    kapt libs.hilt.compiler

    implementation libs.coil.compose

    androidTestImplementation libs.junit
    androidTestImplementation libs.androidx.core
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.junit.ktx
    androidTestImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.hilt.android.v252
    androidTestImplementation libs.hilt.android.testing
    kaptAndroidTest libs.hilt.compiler
}
